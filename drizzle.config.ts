// Drizzle ORM Configuration for Cloudflare D1
// Supports both local (Wrangler) and remote (production) environments
// Last updated: 2025-10-12

import { existsSync, readdirSync } from "node:fs";
import { resolve } from "node:path";
import { defineConfig } from "drizzle-kit";

// Determine environment based on npm script or ENV variable
const envName =
  process.env.npm_lifecycle_event?.endsWith(":remote") ||
  process.env.DB === "remote"
    ? "remote"
    : "local";

// Local D1 database path (created by Wrangler)
const wranglerDir = resolve(__dirname, ".wrangler/state/v3");
const d1Dir = resolve(wranglerDir, "d1/miniflare-D1DatabaseObject");

/**
 * Find SQLite database file for local development
 * This file is auto-generated by Wrangler when running locally
 */
function getLocalDatabaseFile(): string {
  if (!existsSync(d1Dir)) {
    console.warn(
      `Local D1 database directory not found: ${d1Dir}\n` +
        "Run this command to initialize local database:\n\n" +
        "  bun wrangler d1 execute DB --local --command 'SELECT 1'",
    );
    return "";
  }

  const sqliteFiles = readdirSync(d1Dir).filter((file) =>
    file.endsWith(".sqlite"),
  );

  if (sqliteFiles.length === 0) {
    console.warn(
      `No SQLite files found in: ${d1Dir}\n` +
        "Run this command to create local database:\n\n" +
        "  bun wrangler d1 execute DB --local --command 'SELECT 1'",
    );
    return "";
  }

  if (sqliteFiles.length > 1) {
    console.warn(
      `Multiple SQLite files found: ${sqliteFiles.join(", ")}. Using: ${sqliteFiles[0]}`,
    );
  }

  return sqliteFiles[0];
}

const d1File = envName === "local" ? getLocalDatabaseFile() : "";

/**
 * Validate required environment variables for remote database
 */
function requireEnv(key: string): string {
  const value = process.env[key];
  if (!value) {
    throw new Error(
      `${key} environment variable is required for remote database access`,
    );
  }
  return value;
}

/**
 * Drizzle Kit configuration
 * Docs: https://orm.drizzle.team/docs/drizzle-config-file
 */
export default defineConfig({
  out: "./drizzle/migrations",
  schema: "./drizzle/schema",
  dialect: "sqlite",
  casing: "snake_case",

  // Local development: use Wrangler-generated SQLite file
  ...(envName === "local" &&
    d1File && {
      dbCredentials: { url: resolve(d1Dir, d1File) },
    }),

  // Production/Remote: use Cloudflare D1 HTTP API
  ...(envName === "remote" && {
    driver: "d1-http",
    dbCredentials: {
      accountId: requireEnv("CLOUDFLARE_ACCOUNT_ID"),
      databaseId: requireEnv("CLOUDFLARE_DATABASE_ID"),
      token: requireEnv("CLOUDFLARE_D1_TOKEN"),
    },
  }),
});
